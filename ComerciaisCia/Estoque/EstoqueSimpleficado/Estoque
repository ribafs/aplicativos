
produtos
compras
estoques
vendas

Cada compra
Será adicionada ao estoque atual
Verifica antes de cadastrar a compra se a quantidade em estoque é maior que o estoque_maximo e alerta caso seja maior

Cada venda
Será reduzida do estoque
Verifica antes de cadastrar a venda se a quantidade em estoque é menor que o estoque_minimo e alerta caso fique menor

create table produtos(
    id INT NOT NULL PRIMARY KEY AUTO_INCREMENT,
    descricao varchar(50) not null,
    estoque_minimo int NULL DEFAULT NULL,
    estoque_maximo int NULL DEFAULT NULL
);

create table compras
    id INT NOT NULL PRIMARY KEY AUTO_INCREMENT,
    produto_id INT NULL DEFAULT NULL,
    quantidade INT NULL DEFAULT NULL,
    valor_unitario DECIMAL(9,2) NULL DEFAULT '0.00',
    data DATE NULL DEFAULT NULL,
	constraint compra_fk foreign key (produto_id) references produtos(id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE estoques (
    id INT NOT NULL PRIMARY KEY AUTO_INCREMENT,
    produto_id INT NULL DEFAULT NULL,
    quantidade INT NULL DEFAULT NULL,
    valor_unitario DECIMAL(9,2) NULL DEFAULT '0.00',
	constraint estoque_fk foreign key (produto_id) references produtos(id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE vendas (
    id INT NOT NULL PRIMARY KEY AUTO_INCREMENT,
    produto_id INT NULL DEFAULT NULL,
    quantidade INT NULL DEFAULT NULL,
    data DATE NULL DEFAULT NULL,
    valor_unitario DECIMAL(9,2) NULL DEFAULT '0.00',
	constraint venda_fk foreign key (produto_id) references produtos(id) ON DELETE CASCADE ON UPDATE CASCADE
);

https://www.devmedia.com.br/implementando-controle-de-estoque-no-mysql-com-triggers-e-procedures/26352

